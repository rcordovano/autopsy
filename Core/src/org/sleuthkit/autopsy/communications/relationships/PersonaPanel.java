/*
 * Autopsy Forensic Browser
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obt ain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.communications.relationships;

import java.awt.Dimension;
import javax.swing.JButton;
import org.sleuthkit.autopsy.centralrepository.datamodel.Persona;

/**
 *
 * Panel to show a single persona with a button for viewing persona details.
 */
public class PersonaPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private final Persona persona;

    /**
     * Creates new form PersonaPanel
     */
    PersonaPanel(Persona persona) {
        initComponents();
        this.persona = persona;
        personaIDLabel.setText(persona.getName());
    }

    /**
     * Returns the persona displayed by this panel.
     *
     * @return
     */
    Persona getPersona() {
        return persona;
    }

    /**
     * Returns the preferred width for the given persona label.
     *
     * @return
     */
    int getPersonaLabelPreferedWidth() {
        return personaIDLabel.getPreferredSize().width;
    }

    /**
     * Sets the preferred width for the persona name label.
     *
     * @param width
     */
    void setPersonalLabelPreferredWidth(int width) {
        Dimension currentDim = personaIDLabel.getPreferredSize();
        personaIDLabel.setPreferredSize(new Dimension(Math.max(currentDim.width, width), currentDim.height));
    }

    /**
     * Returns the View button for this panel.
     *
     * @return
     */
    JButton getViewButton() {
        return viewButton;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        personaIDLabel = new javax.swing.JLabel();
        viewButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(personaIDLabel, org.openide.util.NbBundle.getMessage(PersonaPanel.class, "PersonaPanel.personaIDLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(personaIDLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(viewButton, org.openide.util.NbBundle.getMessage(PersonaPanel.class, "PersonaPanel.viewButton.text")); // NOI18N
        viewButton.setMargin(new java.awt.Insets(0, 5, 0, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(viewButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel personaIDLabel;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
